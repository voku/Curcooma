/**
* Helper
*
* @desc Helper are classes and formattings which are used to accomplish repeating task. Mainly we use ds- for design-task and bv- for behavioral tasks.
* @author [XX]
* @dependency _app_settings.scss
*/

// Behavioral Tasks (.bv-)
.bv-cf {
	&:before,
	&:after {
    content: " ";
    display: table;
	}

	&:after { clear: both; }
}
.bv-float-left { float: left; }
.bv-float-right { float: right; }



// Design Tasks (.ds-)
@mixin ds-box-shadow ($color) { box-shadow: 3px 3px 3px $color; }
@mixin ds-special-bullets ($bullet, $color) {
  ul { list-style: none; margin-left: -5px;  padding: 0 0 0 25px;
    li { margin-bottom: 5px;
      &:last-child { margin-bottom: 0; }
    }
    li:before  {
    	display: inline-block;
    	width: 1.5em;
    	height: 15px;
    	font-size: 1.2em;
    	text-align: center;
    	color: $color;
    	margin: 0 0 0 -26px;
    	content: $bullet;
    	line-height: 1.7;
    	position:relative;
    	bottom: 1px;  }
  }
}

// Gradient Mixin taken from http://sassmeister.com/gist/b58f6e2cc3160007c880
// @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%);
// @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
// @include linear-gradient(#31B7D7, #EDAC7D);
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}


// Media Queries (from min to max)
@media (min-width: $breakpoint-min) { }

@media (min-width: $breakpoint-small) { }

@media (min-width: $breakpoint-medium) { }

@media (min-width: $breakpoint-large) { }

@media (min-width: $breakpoint-max) { }
